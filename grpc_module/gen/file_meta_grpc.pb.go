// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: file_meta.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetFileMetaServiceClient is the client API for GetFileMetaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetFileMetaServiceClient interface {
	GetFileMeta(ctx context.Context, in *RequestUrl, opts ...grpc.CallOption) (*FileMeta, error)
}

type getFileMetaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetFileMetaServiceClient(cc grpc.ClientConnInterface) GetFileMetaServiceClient {
	return &getFileMetaServiceClient{cc}
}

func (c *getFileMetaServiceClient) GetFileMeta(ctx context.Context, in *RequestUrl, opts ...grpc.CallOption) (*FileMeta, error) {
	out := new(FileMeta)
	err := c.cc.Invoke(ctx, "/file_streaming.GetFileMetaService/GetFileMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetFileMetaServiceServer is the server API for GetFileMetaService service.
// All implementations must embed UnimplementedGetFileMetaServiceServer
// for forward compatibility
type GetFileMetaServiceServer interface {
	GetFileMeta(context.Context, *RequestUrl) (*FileMeta, error)
	mustEmbedUnimplementedGetFileMetaServiceServer()
}

// UnimplementedGetFileMetaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetFileMetaServiceServer struct {
}

func (UnimplementedGetFileMetaServiceServer) GetFileMeta(context.Context, *RequestUrl) (*FileMeta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileMeta not implemented")
}
func (UnimplementedGetFileMetaServiceServer) mustEmbedUnimplementedGetFileMetaServiceServer() {}

// UnsafeGetFileMetaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetFileMetaServiceServer will
// result in compilation errors.
type UnsafeGetFileMetaServiceServer interface {
	mustEmbedUnimplementedGetFileMetaServiceServer()
}

func RegisterGetFileMetaServiceServer(s grpc.ServiceRegistrar, srv GetFileMetaServiceServer) {
	s.RegisterService(&GetFileMetaService_ServiceDesc, srv)
}

func _GetFileMetaService_GetFileMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetFileMetaServiceServer).GetFileMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_streaming.GetFileMetaService/GetFileMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetFileMetaServiceServer).GetFileMeta(ctx, req.(*RequestUrl))
	}
	return interceptor(ctx, in, info, handler)
}

// GetFileMetaService_ServiceDesc is the grpc.ServiceDesc for GetFileMetaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetFileMetaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_streaming.GetFileMetaService",
	HandlerType: (*GetFileMetaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileMeta",
			Handler:    _GetFileMetaService_GetFileMeta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file_meta.proto",
}
